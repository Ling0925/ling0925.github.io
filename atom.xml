<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhuling</title>
  
  
  <link href="http://ling0925.github.io/atom.xml" rel="self"/>
  
  <link href="http://ling0925.github.io/"/>
  <updated>2022-03-05T08:16:42.332Z</updated>
  <id>http://ling0925.github.io/</id>
  
  <author>
    <name>Zhuling</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust 基本语法</title>
    <link href="http://ling0925.github.io/2022/03/05/rust-base-syntax/"/>
    <id>http://ling0925.github.io/2022/03/05/rust-base-syntax/</id>
    <published>2022-03-05T03:37:48.000Z</published>
    <updated>2022-03-05T08:16:42.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-基本语法"><a href="#Rust-基本语法" class="headerlink" title="Rust 基本语法"></a>Rust 基本语法</h1><p>Rust的语法与C++类似，是一门自由度比较高的语言。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在Rust中，创建变量的形式像这样</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>let</code>为创建变量的关键字，<code>s</code>为变量名，<code>String</code>则为变量类型，<code>String::new()</code>则是变量的值。</p><h3 id="自动推导"><a href="#自动推导" class="headerlink" title="自动推导"></a>自动推导</h3><p>Rust优秀的编译器可以自动推导出大部分的数据类型，于是就可以省略掉变量类型。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="可变类型"><a href="#可变类型" class="headerlink" title="可变类型"></a>可变类型</h3><p>默认创建的变量都为不可变变量，不可以再重新赋值或者更改。要创建一个可变变量，可以使用<code>mut</code>关键字。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="变量遮盖"><a href="#变量遮盖" class="headerlink" title="变量遮盖"></a>变量遮盖</h3><p>变量遮盖可以使用已有的变量名来重新创建一个变量。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"Rust"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当后面再进行使用时，<code>s</code>就变成了一个值为<code>Rust</code>的不可变变量，而原始的可变变量<code>s</code>被遮盖。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Rust作为一门同时拥有面向过程和面向对象形式的语言，在函数上提供了非常多的语法糖。</p><h3 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h3><p>main函数是大部分语言中的入口函数。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// code</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Rust中的main函数不带参数,并使用<code>fn</code>关键字进行声明。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>main函数是可以有返回值的。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">ReturnType</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">ReturnType</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>-&gt;</code>操作符来声明一个返回值的类型，与大部分语言相同，可以使用<code>return</code>关键字来结束方法并返回一个值。也可以省略掉<code>return</code>关键字，像这样：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">usize</span> <span class="token punctuation">&#123;</span>    <span class="token number">123</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在省略<code>return</code>关键字的同时，也要去掉结尾的<code>;</code>，这样编译器就会把这一行表达式作为当前作用域的返回值来进行处理。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>参数可以为函数作用域提供一个外来值。在Rust的所有权概念下，传入函数的引用会将所有权转移至函数内部，并在函数结束后被释放。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">words</span><span class="token punctuation">(</span>words<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span><span class="token punctuation">&#123;</span>    words<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>Rust允许以代码块的形式申明作用域。我们可以手动声明一块作用域，当作用域中的代码执行完毕时，其中的所有引用都会被清除。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"Rust"</span><span class="token punctuation">;</span> <span class="token comment">// Shadowing</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用域是可以有返回值的，与函数一样，会将最后一句表达式的值返回。我们可以像声明变量那样来接收这个返回值。注意，当最后一句不是表达式时，默认返回的是一个空的元组。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//  s == Rust</span>        <span class="token string">"Rust"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tup <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment">// tup == ()</span>        <span class="token string">"Rust"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Rust-基本语法&quot;&gt;&lt;a href=&quot;#Rust-基本语法&quot; class=&quot;headerlink&quot; title=&quot;Rust 基本语法&quot;&gt;&lt;/a&gt;Rust 基本语法&lt;/h1&gt;&lt;p&gt;Rust的语法与C++类似，是一门自由度比较高的语言。&lt;/p&gt;
&lt;h2 id=&quot;变量</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Rust 基本数据类型</title>
    <link href="http://ling0925.github.io/2022/03/04/rust-base-types/"/>
    <id>http://ling0925.github.io/2022/03/04/rust-base-types/</id>
    <published>2022-03-04T11:16:00.000Z</published>
    <updated>2022-03-05T08:08:27.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-数据类型"><a href="#Rust-数据类型" class="headerlink" title="Rust 数据类型"></a>Rust 数据类型</h1><p>Rust中所有的值都有其确切的数据类型，分为基本类型与复合类型。</p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>基本类型意味着无法再进行解构，为原子类型。以下数据类型均为基本类型：</p><ul><li>数值类型： </li><li><ul><li>有符号整型：<code>i8</code>、<code>i16</code>、<code>i32</code>、<code>i64</code>、<code>isize</code>。</li></ul></li><li><ul><li>无符号整型：<code>u8</code>、<code>u16</code>、<code>u32</code>、<code>u64</code>、<code>usize</code>。</li></ul></li><li>字符串：</li><li><ul><li><code>String</code>字符串与<code>&amp;str</code>字符串切片。</li></ul></li><li>布尔类型：</li><li><ul><li><code>true</code>与<code>false</code>。</li></ul></li><li>单元类型：</li><li><ul><li>元组<code>()</code>，唯一值也是<code>()</code>。</li></ul></li></ul><h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><p>当基础类型无法满足结构要求时，可以使用复合类型将其包裹起来。复合类型由其他类型组合而成，例如<code>struct</code>、<code>String</code>、<code>()</code>与<code>enum</code>都是复合类型。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span><span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span>    gender<span class="token punctuation">:</span> <span class="token class-name">Gender</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token type-definition class-name">Gender</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Woman</span><span class="token punctuation">,</span>    <span class="token class-name">Man</span><span class="token punctuation">,</span>    <span class="token class-name">Transgender</span><span class="token punctuation">,</span>    <span class="token class-name">None</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h3><p>Rust中的字符串字面量类型为<code>&amp;str</code>，即切片（slice）。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"rust"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切片允许使用引用集合中的部分连续元素，而不是整个集合。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//hello</span><span class="token keyword">let</span> world <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">..</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上就是创建切片的语法，使用方括号并且指定范围[起始位置..结束位置]，其位置从<code>0</code>开始，为<code>右半开区间</code>。其长度即为<code>结束索引</code>-<code>起始索引</code>。</p><blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意!"></a>注意!</h4><p>当在对占用不止一个字节的字符进行处理时,切片位置不正确会造成程序异常终止!</p><p>想要对占用多个字节的字符进行处理时,可以使用<code>chars</code>方法.</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">for</span> <span class="token keyword">char</span> <span class="token keyword">in</span> <span class="token string">"中文"</span><span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当需要对其进行进一步操作时,需要使用第三方库来进行处理。例如:<a href="https://crates.io/crates/utf8_slice">utf8_slice</a>。</p></blockquote><h3 id="元组与解构"><a href="#元组与解构" class="headerlink" title="元组与解构"></a>元组与解构</h3><p>元组由多种类型组合而成，长度与顺序都是固定的。只需要将类型使用括号包裹起来就可以创建一个元组：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> tup<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10.2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要访问元组中的某个元素可以使用 <code>.</code> 来获取：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> number <span class="token operator">=</span> tup<span class="token number">.1</span><span class="token punctuation">;</span> <span class="token comment">//10.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h4><p>解构在语法上与元组十分相似，都是使用括号包裹起来，只是元组包裹的是数据类型和数值或者引用，而解构包裹的是变量名：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">)</span> <span class="token operator">=</span> tup<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解构可以一次性创建多个变量并按照顺序从元组中获取数据，以上即创建了<code>x</code>，<code>y</code>，<code>z</code>三个变量。</p><h4 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h4><p>将一组数据使用元组包裹，作为方法的返回值，使用时再进行解构，这样可以同时返回多种数据。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>words<span class="token punctuation">,</span> words_size<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">push_rust_word</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; - &#123;&#125;"</span><span class="token punctuation">,</span> words<span class="token punctuation">,</span> words_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">push_rust_word</span><span class="token punctuation">(</span>words<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> words <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>    words<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">" rust!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码创建了一个字符串切片<code>words</code>,复制一份并作为值传给了<code>push_rust_word</code>函数。而在接受返回值时，使用<code>变量遮罩（Shadowing）</code>特性，将原来的<code>words</code>字符串切片在作用域中覆盖掉，新的字符串<code>words</code>就变成了<code>&quot;hello world rust!&quot;</code>。</p><blockquote><p><code>输出结果： Hello world rust! - 17 </code></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Rust-数据类型&quot;&gt;&lt;a href=&quot;#Rust-数据类型&quot; class=&quot;headerlink&quot; title=&quot;Rust 数据类型&quot;&gt;&lt;/a&gt;Rust 数据类型&lt;/h1&gt;&lt;p&gt;Rust中所有的值都有其确切的数据类型，分为基本类型与复合类型。&lt;/p&gt;
&lt;h2 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ling0925.github.io/2022/03/04/hello-world/"/>
    <id>http://ling0925.github.io/2022/03/04/hello-world/</id>
    <published>2022-03-04T09:06:00.738Z</published>
    <updated>2022-03-04T09:06:00.738Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
